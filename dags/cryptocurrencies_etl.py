# -*- coding: utf-8 -*-
"""cryptocurrencies_etl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sya5ntPiLkEC_42yA1L-wfTIlH5jJNcK
"""

#!pip install apache-airflow -q

from airflow import DAG
from airflow.providers.snowflake.operators.snowflake import SnowflakeOperator
from datetime import datetime
from airflow.utils.dates import days_ago
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.models import Variable
from airflow.decorators import task
import requests

def return_snowflake_conn():
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')
    return hook.get_conn().cursor()

@task
def extract_crypto(symbols):
    crypto_result = {}

    for symbol in symbols:
      url = f"https://rest.coinapi.io/v1/ohlcv/{symbol}/history?period_id=1DAY&time_start=2024-01-01T00:00:00"
      headers = {"X-CoinAPI-Key": coin_api_key}
      res = requests.get(url, headers=headers).json()
      crypto_result[symbol] = res[-100:]

    return crypto_result

@task
def transform_crypto(raw_data):
    transformed_data = []

    for symbol, records in raw_data.items():
        for record in records:
            transformed_record = {
                '1. price_open': f"{record['price_open']:.4f}",
                '2. price_high': f"{record['price_high']:.4f}",
                '3. price_low': f"{record['price_low']:.4f}",
                '4. price_close': f"{record['price_close']:.4f}",
                '5. volume_traded': f"{int(record['volume_traded']):,}",
                '6. trades_count': f"{int(record['trades_count']):,}",
                '7. symbol': symbol,
                '8. date': record['time_period_start'][:10]
            }
            transformed_data.append(transformed_record)

    return transformed_data

@task
def load_crypto(con, results, target_table):
    try:
        con.execute("BEGIN")

        con.execute(f"""
            CREATE OR REPLACE TABLE {target_table} (
                symbol VARCHAR(50) NOT NULL,
                date DATE NOT NULL,
                price_open DECIMAL(10, 4) NOT NULL,
                price_high DECIMAL(10, 4) NOT NULL,
                price_low DECIMAL(10, 4) NOT NULL,
                price_close DECIMAL(10, 4) NOT NULL,
                volume_traded BIGINT NOT NULL,
                trades_count INT NOT NULL,
                PRIMARY KEY (symbol, date)
            )
        """)

        for r in results:
            symbol = r['7. symbol'].replace("'", "''")
            date = r['8. date'].replace("'", "''")
            open_price = r['1. price_open']
            high_price = r['2. price_high']
            low_price = r['3. price_low']
            close_price = r['4. price_close']
            volume = int(r['5. volume_traded'].replace(",", "").replace("'", ""))
            trades_count = int(r['6. trades_count'].replace(",", "").replace("'", ""))

            sql = f"""
                INSERT INTO {target_table} (symbol, date, price_open, price_high, price_low, price_close, volume_traded, trades_count)
                SELECT
                  '{symbol}', '{date}', {open_price}, {high_price}, {low_price}, {close_price}, {volume}, {trades_count}
                WHERE NOT EXISTS (SELECT 1 FROM {target_table} WHERE date = '{date}' AND symbol = '{symbol}');"""
            con.execute(sql)

        con.execute("COMMIT")
    except Exception as e:
        con.execute("ROLLBACK")
        print(e)
        raise e

with DAG(
    dag_id = 'cryptocurrencies_etl',
    start_date = datetime(2024,10,10),
    catchup=False,
    tags=['ETL','Cryptocurrency trading pairs'],
    schedule = '15 21 * * *'
) as dag:
    target_table = "dev.raw_data.crypto_currencies"
    coin_api_key = Variable.get("coin_api_key")
    cursor = return_snowflake_conn()
    symbols = ["BINANCE_SPOT_ETH_BTC", "BINANCE_SPOT_ADA_USDT","BINANCE_SPOT_XLM_USDT","BINANCE_SPOT_GALA_USDT"]

    trigger_cryptocurrencies_elt = TriggerDagRunOperator(
        task_id='trigger_cryptocurrencies_elt',
        trigger_dag_id='cryptocurrencies_elt',
        wait_for_completion=False,
    )

    raw_data = extract_crypto(symbols)
    transformed_data = transform_crypto(raw_data)
    load_crypto(cursor, transformed_data, target_table) >> trigger_cryptocurrencies_elt